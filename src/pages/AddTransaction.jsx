import React, { useState, useEffect } from 'react'; // Adicionado useEffect
import { motion } from 'framer-motion';
import { Helmet } from 'react-helmet';
import { useNavigate } from 'react-router-dom';
import { ArrowLeft, Plus, DollarSign, Repeat, Loader2 } from 'lucide-react'; // Adicionado Loader2
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from '../components/ui/card';
import { Button } from '../components/ui/button';
import { Input } from '../components/ui/input';
import { Label } from '../components/ui/label';
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '../components/ui/select';
import { useTransactions } from '../hooks/useTransactions';
import { useCategories } from '../hooks/useCategories'; // Importando o novo hook
import { useToast } from '../components/ui/use-toast';

const AddTransaction = () => {
Â  // O 'category' agora armazenarÃ¡ o ID da categoria selecionada
Â  const [formData, setFormData] = useState({
Â  Â  type: '',
Â  Â  description: '',
Â  Â  amount: '',
Â  Â  category_id: '', // MUDANÃ‡A: Mudamos de 'category' para 'category_id'
Â  Â  months: 1,
Â  });
Â  const [isSubmitting, setIsSubmitting] = useState(false); // Renomeado para maior clareza
Â  const { addTransaction } = useTransactions();
Â  const { categories, isLoading: loadingCategories, error: categoriesError } = useCategories(); // Usando o novo hook
Â  const { toast } = useToast();
Â  const navigate = useNavigate();

Â  const transactionTypes = [
Â  Â  { value: 'receita', label: 'Receita' },
Â  Â  { value: 'receita_continua', label: 'Receita ContÃ­nua' },
Â  Â  { value: 'despesa', label: 'Despesa' },
Â  Â  { value: 'debito_automatico', label: 'DÃ©bito AutomÃ¡tico' }
Â  ];

Â  // Ajuste para lidar com o category_id
Â  const handleChange = (field, value) => {
Â  Â  setFormData(prev => ({
Â  Â  Â  ...prev,
Â  Â  Â  [field]: value
Â  Â  }));
Â  };

Â  // Efeito para mostrar erro caso as categorias nÃ£o sejam carregadas
Â  useEffect(() => {
    if (categoriesError) {
        toast({
            title: "Erro ao carregar dados",
            description: categoriesError,
            variant: "destructive",
        });
    }
  }, [categoriesError, toast]);


Â  const handleSubmit = async (e) => {
Â  Â  e.preventDefault();
Â  Â Â 
Â  Â  // MUDANÃ‡A: Validando category_id
Â  Â  if (!formData.type || !formData.description || !formData.amount || !formData.category_id) {
Â  Â  Â  toast({
Â  Â  Â  Â  title: "Erro",
Â  Â  Â  Â  description: "Preencha todos os campos obrigatÃ³rios.",
Â  Â  Â  Â  variant: "destructive",
Â  Â  Â  });
Â  Â  Â  return;
Â  Â  }

Â  Â  if (parseFloat(formData.amount) <= 0) {
Â  Â  Â  toast({
Â  Â  Â  Â  title: "Erro",
Â  Â  Â  Â  description: "O valor deve ser maior que zero.",
Â  Â  Â  Â  variant: "destructive",
Â  Â  Â  });
Â  Â  Â  return;
Â  Â  }

Â  Â  if ((formData.type === 'receita_continua' || formData.type === 'debito_automatico') && parseInt(formData.months, 10) < 1) {
Â  Â  Â  toast({
Â  Â  Â  Â  title: "Erro",
Â  Â  Â  Â  description: "A quantidade de meses deve ser de no mÃ­nimo 1.",
Â  Â  Â  Â  variant: "destructive",
Â  Â  Â  });
Â  Â  Â  return;
Â  Â  }

Â  Â  setIsSubmitting(true); // Usando o novo estado

Â  Â  try {
        // MUDANÃ‡A: O hook addTransaction AGORA RECEBE category_id
Â  Â  Â  Â  const result = await addTransaction({
Â  Â  Â  Â  Â  Â  ...formData,
            // category_id jÃ¡ estÃ¡ no formData
Â  Â  Â  Â  Â  Â  amount: parseFloat(formData.amount),
Â  Â  Â  Â  Â  Â  months: parseInt(formData.months, 10)
Â  Â  Â  Â  });
        
        if (result.success) {
            toast({
                title: "TransaÃ§Ã£o adicionada! ðŸŽ‰",
                description: "Sua transaÃ§Ã£o foi registrada com sucesso.",
            });
            navigate('/dashboard');
        } else {
            toast({
                title: "Erro",
                description: result.error || "Ocorreu um erro ao adicionar a transaÃ§Ã£o.",
                variant: "destructive",
            });
        }
Â  Â  } catch (error) {
Â  Â  Â  toast({
Â  Â  Â  Â  title: "Erro de ConexÃ£o",
Â  Â  Â  Â  description: "NÃ£o foi possÃ­vel comunicar com o servidor.",
Â  Â  Â  Â  variant: "destructive",
Â  Â  Â  });
Â  Â  } finally {
Â  Â  Â  setIsSubmitting(false); // Usando o novo estado
Â  Â  }
Â  };

Â  const isRecurring = formData.type === 'receita_continua' || formData.type === 'debito_automatico';
Â  const loading = isSubmitting || loadingCategories; // Combina o loading do formulÃ¡rio com o loading das categorias

Â  return (
Â  Â  <>
Â  Â  Â  <Helmet>
Â  Â  Â  Â  <title>Adicionar TransaÃ§Ã£o - MoneyMind</title>
Â  Â  Â  Â  <meta name="description" content="Adicione receitas, despesas e dÃ©bitos automÃ¡ticos no MoneyMind para manter seu controle financeiro atualizado." />
Â  Â  Â  </Helmet>

Â  Â  Â  <div className="min-h-screen p-4 md:p-6">
Â  Â  Â  Â  <div className="max-w-2xl mx-auto space-y-6">
Â  Â  Â  Â  Â  {/* Header */}
Â  Â  Â  Â  Â  <motion.div
Â  Â  Â  Â  Â  Â  initial={{ opacity: 0, y: -20 }}
Â  Â  Â  Â  Â  Â  animate={{ opacity: 1, y: 0 }}
Â  Â  Â  Â  Â  Â  className="flex items-center space-x-4"
Â  Â  Â  Â  Â  >
Â  Â  Â  Â  Â  Â  <Button
Â  Â  Â  Â  Â  Â  Â  variant="ghost"
Â  Â  Â  Â  Â  Â  Â  size="icon"
Â  Â  Â  Â  Â  Â  Â  onClick={() => navigate('/dashboard')}
Â  Â  Â  Â  Â  Â  Â  className="text-white hover:bg-white/10"
Â  Â  Â  Â  Â  Â  >
Â  Â  Â  Â  Â  Â  Â  <ArrowLeft className="h-5 w-5" />
Â  Â  Â  Â  Â  Â  </Button>
Â  Â  Â  Â  Â  Â  <div>
Â  Â  Â  Â  Â  Â  Â  <h1 className="text-3xl font-bold text-white">Adicionar TransaÃ§Ã£o</h1>
Â  Â  Â  Â  Â  Â  Â  <p className="text-gray-300 mt-1">
Â  Â  Â  Â  Â  Â  Â  Â  Registre uma nova movimentaÃ§Ã£o financeira
Â  Â  Â  Â  Â  Â  Â  </p>
Â  Â  Â  Â  Â  Â  </div>
Â  Â  Â  Â  Â  </motion.div>

Â  Â  Â  Â  Â  {/* Form Card */}
Â  Â  Â  Â  Â  <motion.div
Â  Â  Â  Â  Â  Â  initial={{ opacity: 0, y: 20 }}
Â  Â  Â  Â  Â  Â  animate={{ opacity: 1, y: 0 }}
Â  Â  Â  Â  Â  Â  transition={{ delay: 0.1 }}
Â  Â  Â  Â  Â  >
Â  Â  Â  Â  Â  Â  <Card className="glass-effect border-white/20">
Â  Â  Â  Â  Â  Â  Â  <CardHeader>
Â  Â  Â  Â  Â  Â  Â  Â  <CardTitle className="flex items-center space-x-2 text-white">
Â  Â  Â  Â  Â  Â  Â  Â  Â  <Plus className="h-6 w-6 text-blue-400" />
Â  Â  Â  Â  Â  Â  Â  Â  Â  <span>Nova TransaÃ§Ã£o</span>
Â  Â  Â  Â  Â  Â  Â  Â  </CardTitle>
Â  Â  Â  Â  Â  Â  Â  Â  <CardDescription className="text-gray-300">
Â  Â  Â  Â  Â  Â  Â  Â  Â  Preencha os dados da sua transaÃ§Ã£o
Â  Â  Â  Â  Â  Â  Â  Â  </CardDescription>
Â  Â  Â  Â  Â  Â  Â  </CardHeader>
Â  Â  Â  Â  Â  Â  Â Â 
Â  Â  Â  Â  Â  Â  Â  <CardContent>
Â  Â  Â  Â  Â  Â  Â  Â  <form onSubmit={handleSubmit} className="space-y-6">
Â  Â  Â  Â  Â  Â  Â  Â  Â  {/* Transaction Type */}
Â  Â  Â  Â  Â  Â  Â  Â  Â  <div className="space-y-2">
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  <Label className="text-white">Tipo de TransaÃ§Ã£o *</Label>
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  <Select 
                        value={formData.type} 
                        onValueChange={(value) => handleChange('type', value)}
                        disabled={loadingCategories}
                      >
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  <SelectTrigger className="bg-white/10 border-white/20 text-white">
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  <SelectValue placeholder="Selecione o tipo" />
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  </SelectTrigger>
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  <SelectContent className="bg-slate-800 border-slate-700">
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  {transactionTypes.map((type) => (
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  <SelectItem key={type.value} value={type.value} className="text-white hover:bg-slate-700">
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  {type.label}
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  </SelectItem>
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  ))}
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  </SelectContent>
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  </Select>
Â  Â  Â  Â  Â  Â  Â  Â  Â  </div>

Â  Â  Â  Â  Â  Â  Â  Â  Â  {/* Months for recurring */}
Â  Â  Â  Â  Â  Â  Â  Â  Â  {isRecurring && (
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  <motion.div
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  initial={{ opacity: 0, height: 0 }}
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  animate={{ opacity: 1, height: 'auto' }}
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  transition={{ duration: 0.3 }}
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  className="space-y-2 overflow-hidden"
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  >
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  <Label htmlFor="months" className="text-white">Quantidade de Meses *</Label>
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  <div className="relative">
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  <Repeat className="absolute left-3 top-1/2 transform -translate-y-1/2 h-4 w-4 text-gray-400" />
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  <Input
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  id="months"
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  type="number"
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  min="1"
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  placeholder="Ex: 12"
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  value={formData.months}
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  onChange={(e) => handleChange('months', e.target.value)}
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  className="bg-white/10 border-white/20 text-white placeholder:text-gray-400 pl-10"
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  />
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  </div>
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  <p className="text-xs text-gray-400">
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  A transaÃ§Ã£o serÃ¡ criada para os prÃ³ximos {formData.months || 1} meses.
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  </p>
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  </motion.div>
Â  Â  Â  Â  Â  Â  Â  Â  Â  )}

Â  Â  Â  Â  Â  Â  Â  Â  Â  {/* Description */}
Â  Â  Â  Â  Â  Â  Â  Â  Â  <div className="space-y-2">
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  <Label htmlFor="description" className="text-white">DescriÃ§Ã£o *</Label>
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  <Input
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  id="description"
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  type="text"
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  placeholder="Ex: SalÃ¡rio, Aluguel, Supermercado..."
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  value={formData.description}
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  onChange={(e) => handleChange('description', e.target.value)}
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  className="bg-white/10 border-white/20 text-white placeholder:text-gray-400"
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  />
Â  Â  Â  Â  Â  Â  Â  Â  Â  </div>

Â  Â  Â  Â  Â  Â  Â  Â  Â  {/* Amount */}
Â  Â  Â  Â  Â  Â  Â  Â  Â  <div className="space-y-2">
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  <Label htmlFor="amount" className="text-white">Valor *</Label>
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  <div className="relative">
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  <DollarSign className="absolute left-3 top-1/2 transform -translate-y-1/2 h-4 w-4 text-gray-400" />
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  <Input
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  id="amount"
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  type="number"
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  step="0.01"
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  min="0"
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  placeholder="0,00"
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  value={formData.amount}
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  onChange={(e) => handleChange('amount', e.target.value)}
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  className="bg-white/10 border-white/20 text-white placeholder:text-gray-400 pl-10"
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  />
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  </div>
Â  Â  Â  Â  Â  Â  Â  Â  Â  </div>

Â  Â  Â  Â  Â  Â  Â  Â  Â  {/* Category (AGORA DINÃ‚MICA) */}
Â  Â  Â  Â  Â  Â  Â  Â  Â  <div className="space-y-2">
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  <Label className="text-white">Categoria *</Label>
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  <Select 
                        value={formData.category_id} 
                        onValueChange={(value) => handleChange('category_id', value)}
                        disabled={loadingCategories}
                      >
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  <SelectTrigger className="bg-white/10 border-white/20 text-white">
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  <SelectValue placeholder={loadingCategories ? "Carregando categorias..." : "Selecione a categoria"} />
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  </SelectTrigger>
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  <SelectContent className="bg-slate-800 border-slate-700">
                        {loadingCategories ? (
                            <div className="p-2 flex items-center justify-center text-gray-400">
                                <Loader2 className="h-4 w-4 mr-2 animate-spin" /> Carregando...
                            </div>
                        ) : (
                            categories.map((category) => (
                                <SelectItem key={category.id} value={String(category.id)} className="text-white hover:bg-slate-700">
                                    {category.name}
                                </SelectItem>
                            ))
                        )}
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  </SelectContent>
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  </Select>
Â  Â  Â  Â  Â  Â  Â  Â  Â  </div>

Â  Â  Â  Â  Â  Â  Â  Â  Â  {/* Submit Button */}
Â  Â  Â  Â  Â  Â  Â  Â  Â  <div className="flex space-x-4 pt-4">
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  <Button
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  type="button"
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  variant="outline"
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  onClick={() => navigate('/dashboard')}
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  className="flex-1 border-white/20 text-white hover:bg-white/10"
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  >
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Cancelar
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  </Button>
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  <Button
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  type="submit"
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  disabled={loading}
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  className="flex-1 bg-gradient-to-r from-blue-500 to-purple-600 hover:from-blue-600 hover:to-purple-700 text-white"
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  >
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  {loading ? (
                          <Loader2 className="mr-2 h-4 w-4 animate-spin" />
                        ) : (
                          "Salvar TransaÃ§Ã£o"
                        )}
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  </Button>
Â  Â  Â  Â  Â  Â  Â  Â  Â  </div>
Â  Â  Â  Â  Â  Â  Â  Â  </form>
Â  Â  Â  Â  Â  Â  Â  </CardContent>
Â  Â  Â  Â  Â  Â  </Card>
Â  Â  Â  Â  Â  </motion.div>

Â  Â  Â  Â  Â  {/* Info Card (MANTIDO) */}
Â  Â  Â  Â  Â  <motion.div
Â  Â  Â  Â  Â  Â  initial={{ opacity: 0, y: 20 }}
Â  Â  Â  Â  Â  Â  animate={{ opacity: 1, y: 0 }}
Â  Â  Â  Â  Â  Â  transition={{ delay: 0.2 }}
Â  Â  Â  Â  Â  >
Â  Â  Â  Â  Â  Â  <Card className="glass-effect border-white/20">
Â  Â  Â  Â  Â  Â  Â  <CardContent className="p-6">
Â  Â  Â  Â  Â  Â  Â  Â  <h3 className="font-semibold text-white mb-3">Tipos de TransaÃ§Ã£o:</h3>
Â  Â  Â  Â  Â  Â  Â  Â  <div className="space-y-2 text-sm text-gray-300">
Â  Â  Â  Â  Â  Â  Â  Â  Â  <p><span className="text-green-400 font-medium">Receita:</span> Entrada Ãºnica de dinheiro</p>
Â  Â  Â  Â  Â  Â  Â  Â  Â  <p><span className="text-green-400 font-medium">Receita ContÃ­nua:</span> Entrada recorrente (ex: salÃ¡rio)</p>
Â  Â  Â  Â  Â  Â  Â  Â  Â  <p><span className="text-red-400 font-medium">Despesa:</span> Gasto Ãºnico</p>
Â  Â  Â  Â  Â  Â  Â  Â  Â  <p><span className="text-red-400 font-medium">DÃ©bito AutomÃ¡tico:</span> Gasto recorrente (ex: conta de luz)</p>
Â  Â  Â  Â  Â  Â  Â  Â  </div>
Â  Â  Â  Â  Â  Â  Â  </CardContent>
Â  Â  Â  Â  Â  Â  </Card>
Â  Â  Â  Â  Â  </motion.div>
Â  Â  Â  Â  </div>
Â  Â  Â  </div>
Â  Â  </>
Â  );
};

export default AddTransaction;